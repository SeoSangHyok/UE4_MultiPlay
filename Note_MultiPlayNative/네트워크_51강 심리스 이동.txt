1. 심리스 이동은 서버트라벨의 한종

2. 사용은 AGameMode::bUseSeamlessTravel 값을 true로 세팅하면 된다. 동적으로 게임중 세팅하는것도 가능

3. 일반 서버트라벨과의 차이는 접속중인 유저를 강제로 로그아웃처리하지 않는다는 점

4. 심리스 이동의 경우 이동할 레벨에 이전 레벨의 PS값들을 그냥 지우는 것이 아니라 이전값에서 필요한 값들을 넘길수 있다.

5. 심리스 이동중 이전 레벨의 PS정보를 넘기는 함수는 APlayerState::CopyProperties()함수를 오버라이딩해서 처리가능. 넘어오는 인자가 새로생길 PS이므로 적절히 캐스팅해 값을 넘겨준다.

6. APlayerState::CopyProperties 함수 사용시 새로 생긴 PS는 APlayerState 형으로만 넘어오기때문에 PS의  자손클래스가 무엇이될지 확실히 해두고 캐스팅처리를 해야한다!.

7. 6.번 항목에 관해 damage처리를 보면 각 대미지 클래스마다 클래스 아이디를 두고 처리하는 방법이 있는데 이와같은 방법을 사용하면 도움이 될듯한다.
   [APlayerState] <- [게임의 매인 스테이트, 클래스 아이디 받아오는 인터페이스제공] <- [자손클래스에서 오버라이딩] 하는 방식으로 말이다.

8. 심리스 이동은 유저를 강제로그아웃 시키지 않는다.(일반적인 서버트라벨은 강제로그아웃->제접속처리) 이때문에 AGameModeBase::PostLogin() 함수가 호출되지 않는다!!!

9. 심리스 이동시 PostLogin처리와 같은 효과는 BP에선 AGameModeBase::HandleStartingNewPlayer 함수를 오버라이딩 해서 처리하면 심리스이동과 일반 서버트라벨 이동 모두 동일하게 처리가 가능한다.

10. BP엣 AGameModeBase::HandleStartingNewPlayer 제정의 해서 사용시 반드시 [부모로의 함수 호출] 처리를 한다. 부모 함수에서 폰을 생성하는 등의 작업을 하기때문

11. 네이티브의 경우 심리스 이동과 일반 서버트라벨 이동이 각각 나뉘므로 각각 필요함수를 오버라이딩 해야한다.
  - 일반 서버트라벨 : AGameModeBase::PostLogin() 을 오버라이딩 해서 사용
  - 심리스 이동 : AGameModeBase::HandleSeamlessTravelPlayer() 을 오버라이딩 해서 사용
  즉 번거로와도 네이티브는 둘다 구현을 해야 사용이 가능하다.

12. 서버트라벨시 옵션없이 레벨이름으로만 처리하면 이전레벨에서 가지고 있던 옵션값들이 그대로 넘어가니 주의. 서버트라벨에 옵션스트링을 사용하게된다면 해당 폼 양식을 그대로 따라서 가져가도록 할것!!

13. 일반 서버트라벨이나 openlevel의 경우 레벨 이동시 로그아웃처리를 하고 이로인해 붙어있는 위젯들을 자동으로 제거 한다.
    하지만 심리스 이동의 경우 로그아웃처리를 하지 않기때문에 뷰포트가 그대로 유지되고 이때문에 따로 위젯을 지워야 한다!!!

15. 심리스 이동에 관련자료 링크 남겨둔다.
   http://api.unrealengine.com/KOR/Gameplay/Networking/Travelling/index.html
